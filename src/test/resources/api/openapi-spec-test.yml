openapi: "3.0.3"
info: 
  title: "Api Documentation"
  description: "Api Documentation"
  termsOfService: "urn:tos"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
  
  version: "1.0"
  
servers:
  - url: "http://localhost:__PORT__"
  
tags:
  - name: "home-controller"
    description: "Handles User related opterations"
  
  - name: "pet"
    description: "Handles Pet specific information"
    
  - name: "store"
    description: "the Store Api"
    
  - name: "user"
    description: "the User Api"

paths:
  /:
    get: 
      tags: 
          - "home-controller"
      summary: "index"
      operationId: "indexUsingGET"
      responses:
        200: 
          description: "OK"
          content: 
            "*/*":
              schema: 
                type: string
  /pet:
    get:
      tags:
        - "pet"
      summary: "Get all Pets paged"
      description: "Get all Pets paged"
      operationId: "getAllPetsUsingGET"
      parameters: 
        - name: "page"
          in:   "query"
          required: false
          style: "form"
          schema:
            type: "integer"
            format: "int32"
        
        - name: "size"
          in:   "query"
          required: false
          style: "form"
          schema:
            type: "integer"
            format: "int32"
      
        - name: "sort"
          in: "query"
          required: false
          style: "form"
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful Operation"
          content:
            "application/json":
              schema:
                type: "array"
                items: 
                  $ref: "#/components/schemas/Pet"
    put:
      tags:
        - "pet"
      summary: "Update an existing pet"
      description: "Update an existing pet by Id"
      operationId: "updatePetUsingPUT"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Pet"
          "application/xml":
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        200:
          description: "Successful Operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Pet"
            "application/xml":
              schema:
                $ref: "#/components/schemas/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
    post:
      tags:
        - "pet"
      summary: "Add a new pet to Petstore"
      description: "Add a new pet to Petstore"
      operationId: "addPetUsingPOST"
      requestBody: 
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Pet"
          "application/xml":
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        200:
          description: "Successfull Operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Pet"
            "application/xml":
              schema:
                $ref: "#/components/schemas/Pet"
        405:
          description: "Invalid input"


components:
  schemas:
    Category:
      title: "Category"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: "1"
        name:
          type: "string"
          example: "Dogs"
    ModelApiResponse:
      title: "ModelApiResponse"
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
        type:
          type: "string"
    Order:
      title: "Order"
      type: "object"
      properties:
        complete:
          type: "boolean"
          example: false
        id:
          type: "integer"
          format: "int32"
          example: 10
        petId:
          type: "integer"
          format: "int32"
          example: 198772
        quantity:
          type: "integer"
          format: "int32"
          example: 100
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          example: "approved"
          enum: [ "approved", "delivered", "placed"]
                
    Pet:
      title: "Pet"
      required:
        - "name"
        - "photoUrls"
      type: "object"
      properties:
        category: 
          $ref: "#/components/schemas/Category"
        id:
          type: "integer"
          format: "int64"
          example: 10
        name:
          type: "string"
          example: "doggie"
        photoUrls:
          type: "array"
          items:
            type: "string"
        status:
          type: "string"
          description: "pet status in store"
          enum: [ "available", "pending", "sold"]
        tags:
          type: "array"
          items: 
            $ref: "#/components/schemas/Tag"
        buy_date:
          type: "string"
          format: date
          description: "Date on which pet bought"
        transaction_date:
          type: "string"
          format: date-time
          description: "Date time at which pet buy transaction happens"
        
    Tag:
      title: "Tag"
      type: "object"
      properties: 
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
            
    User:
      title: "User"
      type: "object"
      properties:
        email:
          type: "string"
          example: "john@email.com"
        firstName:
          type: "string"
          example: "John"
        id:
          type: "integer"
          format: "int32"
          example: 10
        lastName:
          type: "string"
          example: "James"
        password:
          type: "string"
          example: "123456"
        phone:
          type: "string"
          example: "12345"
        userStatus:
          type: "integer"
          description: "User Status"
          format: "int32"
          example: 1
        userName:
          type: "string"
          example: "theUser"
    
    Bad_Request:
      type: array
      description: ''
      items:
        $ref: '#/components/schemas/Bad_Request_Field'
    
    Bad_Request_Field:
      type: object
      required: [ name_of_field, message, urn]
      properties:
        name_of_field:
          type: string
          description: The name of the field which is invalid and resulted in the bad request.
        message:
          type: string
          description: The reason message which resulted in the name_of_field.
        urn: 
          type: string
          description: The path or navigation to the name_of_field in the payload with format <body/header/query/path/cookie>:<Filed path/Json path>
    Ineligible_Request:
      description: Details of all invalid business rules.
      allOf:
        - $ref: '#/components/schemas/Error'
    Internal_Server_Error:
      description: Something went so wrong on the server or within the application that it couldn't even tlle you what the problem was
      allOf:
        - $ref: '#/components/schemas/Error'
    Service_Unavailable:
      description: Indicates the downstream service lack of availability due to overload or being down for maintenance.
      allOf: 
        - $ref: '#/components/schemas/Error'
    Resource_Not_Found:
      description: A provider or resource does not exists.
      allOf: 
        - $ref: '#/components/schemas/Error'
    Resource_Conflict:
      description: Indicates a request conflict with the target resource.
      allOf:
        - $ref: '#/components/schemas/Error'
        
    Error:
      description: "
        Error codes and its messages describing the reason for failure.
        Error Code  Ranges for inEligible Object (HTTP Code is '422'): 10000-10999: Reserved for 'in-eligible' failure due to business rules.
        
        Other error Code Ranges:
        1000-1999: m2 Platform, internal, retry-able errors.
        2000-2999: m2 Platform internal, non-retryable
        3000-3999: Provider error, retry-able errors
        4000-4999: Provider error, non-retryable error
        4000-4010: Reserved for Partener Connection Error - message will be consistent as 'Partner Connecion error' . "
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          minimum: 1000
          maximum: 11000
        message:
          type: string
          description: ""
        entities:
          type: array
          items:
            type: string
            description: "
            It can have path to the entity, service name, resource or field that resulted in the request to be failure.
            If the failure is tied to a field/fields, then the entity message are formatter as Bad_request_Field.urn."        
      